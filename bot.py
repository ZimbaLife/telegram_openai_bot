import os
import asyncio
import logging
from collections import defaultdict
from datetime import datetime, UTC

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application, AIORateLimiter,
    CommandHandler, ContextTypes,
)

from openai_client import (
    generate_text,
    generate_image,
    generate_video_minimax,
    generate_video_kling,
)

# ---------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ----------
load_dotenv()
logging.basicConfig(level=logging.INFO)
LOG = logging.getLogger("bot")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN/BOT_TOKEN is not set")

VIDEO_SEM = asyncio.Semaphore(5)
USER_LOCKS = defaultdict(asyncio.Lock)


def build_app() -> Application:
    return (
        Application.builder()
        .token(BOT_TOKEN)
        .rate_limiter(AIORateLimiter())  # —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ python-telegram-bot[rate-limiter]
        .build()
    )


# ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def now_utc():
    return datetime.now(UTC)

def progress_text(prompt: str, started_at: datetime, avg_sec: int = 90) -> str:
    elapsed = int((now_utc() - started_at).total_seconds())
    remain = max(0, avg_sec - elapsed)
    short_prompt = (prompt[:100] + "‚Ä¶") if len(prompt) > 100 else prompt
    return (
        "üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {remain} —Å–µ–∫\n"
        f"üìù {short_prompt}"
    )


# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é:\n"
        "/text <–∑–∞–ø—Ä–æ—Å> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
        "/image <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "/video [minimax|kling] <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/video minimax –∫–æ—Ç—ë–Ω–æ–∫ –±–µ–∂–∏—Ç –ø–æ —Ç—Ä–∞–≤–µ\n"
        "/video kling –¥–µ–≤—É—à–∫–∞ –∏–¥—ë—Ç –ø–æ –ø–ª—è–∂—É –Ω–∞ –∑–∞–∫–∞—Ç–µ"
    )


async def cmd_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = (update.message.text or "").replace("/text", "", 1).strip()
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /text –∏–¥–µ—è –¥–ª—è –ø–æ—Å—Ç–∞")
        return
    try:
        reply = await generate_text(prompt)
        await update.message.reply_text(reply)
    except Exception as e:
        LOG.exception("text error: %r", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def cmd_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = (update.message.text or "").replace("/image", "", 1).strip()
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ü—Ä–∏–º–µ—Ä: /image —Ä—ã–∂–∏–π –∫–æ—Ç –≤ –æ—á–∫–∞—Ö")
        return
    try:
        url = await generate_image(prompt)
        await update.message.reply_photo(photo=url, caption="–ì–æ—Ç–æ–≤–æ!")
    except Exception as e:
        LOG.exception("image error: %r", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def cmd_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").replace("/video", "", 1).strip()
    if not text:
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ. –ü—Ä–∏–º–µ—Ä: /video minimax –∫–æ—Ç—ë–Ω–æ–∫ –±–µ–∂–∏—Ç –ø–æ —Ç—Ä–∞–≤–µ"
        )
        return

    parts = text.split(" ", 1)
    if len(parts) == 2 and parts[0].lower() in ("minimax", "kling"):
        model = parts[0].lower()
        prompt = parts[1]
    else:
        model = "minimax"
        prompt = text

    if len(prompt) > 600:
        prompt = prompt[:600]

    user_id = update.effective_user.id
    started_at = now_utc()

    # –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ç—É—Å
    last_shown = None
    status_text = progress_text(prompt, started_at)
    msg = await update.message.reply_text(status_text)
    last_shown = status_text

    async def worker():
        nonlocal last_shown
        async with USER_LOCKS[user_id]:
            async with VIDEO_SEM:
                video_func = generate_video_minimax if model == "minimax" else generate_video_kling

                # –º—è–≥–∫–∏–π —Ç–∞–π–º-–∞—É—Ç –Ω–∞ —Ñ–æ–Ω–µ (–≤–∏–¥–µ–æ –º–æ–∂–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –¥–æ–ª–≥–æ –∏–∑-–∑–∞ –æ—á–µ—Ä–µ–¥–∏)
                refresh_every = 10
                max_wait = 900  # 15 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
                elapsed = 0
                url = None

                while elapsed < max_wait:
                    try:
                        url = await video_func(prompt)
                        if url:
                            break
                        # –µ—Å–ª–∏ URL –µ—â—ë –Ω–µ—Ç ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –∏ –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å
                        await asyncio.sleep(refresh_every)
                        elapsed += refresh_every
                        new_text = progress_text(prompt, started_at, avg_sec=120)
                        # –Ω–µ —à–ª—ë–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 400 "Message is not modified"
                        if new_text != last_shown:
                            try:
                                await msg.edit_text(new_text)
                                last_shown = new_text
                            except Exception as e:
                                LOG.warning(f"edit_text warning: {e}")
                    except Exception as e:
                        LOG.error(f"Video generation error: {e}")
                        break

                if url:
                    # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—à–ª—ë–º –≤–∏–¥–µ–æ
                    try:
                        await msg.delete()
                    except Exception:
                        pass
                    try:
                        await update.message.reply_video(video=url, caption="–ì–æ—Ç–æ–≤–æ! üéâ")
                    except Exception:
                        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –°—Å—ã–ª–∫–∞: {url}")
                else:
                    try:
                        await msg.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                    except Exception:
                        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    context.application.create_task(worker())


def main():
    app = build_app()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("text", cmd_text))
    app.add_handler(CommandHandler("image", cmd_image))
    app.add_handler(CommandHandler("video", cmd_video))
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
