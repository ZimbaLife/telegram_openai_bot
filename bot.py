import os
import asyncio
import logging
from collections import defaultdict
from datetime import datetime

from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application, AIORateLimiter,
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from openai_client import generate_text, generate_image, start_video_job, check_video_once

# ---------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ----------
load_dotenv()
logging.basicConfig(level=logging.INFO)
LOG = logging.getLogger("bot")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN/BOT_TOKEN is not set")

# –î–æ 5 –≤–∏–¥–µ–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –≤–µ—Å—å –±–æ—Ç (–ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ –±—é–¥–∂–µ—Ç Together)
VIDEO_SEM = asyncio.Semaphore(5)
# –ù–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_LOCKS = defaultdict(asyncio.Lock)


def build_app() -> Application:
    return (
        Application.builder()
        .token(BOT_TOKEN)
        .rate_limiter(AIORateLimiter())  # –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å –ª–∏–º–∏—Ç–∞–º–∏ Telegram
        .build()
    )


# ---------- —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ----------
def progress_text(prompt: str, started_at: datetime, win=(30, 50)) -> str:
    """
    –ü—Ä–æ—Å—Ç–æ–π ¬´—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å¬ª:
    —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è ~90 —Å–µ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ (30‚Äì50 —Å–µ–∫), –∫–æ—Ç–æ—Ä–æ–µ —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –∫ –∫–æ–Ω—Ü—É.
    """
    avg = 90
    elapsed = (datetime.utcnow() - started_at).total_seconds()
    remain = max(0, avg - int(elapsed))
    lo = max(0, min(win[0], remain))
    hi = max(lo, min(win[1], remain))
    short_prompt = (prompt[:100] + "‚Ä¶") if len(prompt) > 100 else prompt
    return (
        "üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ‚Ä¶\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {lo}‚Äì{hi} —Å–µ–∫\n"
        f"üìù –ó–∞–ø—Ä–æ—Å: {short_prompt}"
    )


# ---------- —Ö—ç–Ω–¥–ª–µ—Ä—ã ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é:\n"
        "/text –¢–í–û–ô_–ó–ê–ü–†–û–° ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç\n"
        "/image –û–ü–ò–°–ê–ù–ò–ï ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "/video –û–ü–ò–°–ê–ù–ò–ï ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ\n"
        "\n–ü–æ–ø—Ä–æ–±—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: /video –∫–æ—Ç—ë–Ω–æ–∫ –±–µ–∂–∏—Ç –ø–æ —Ç—Ä–∞–≤–µ –Ω–∞ –∑–∞–∫–∞—Ç–µ"
    )
    await update.message.reply_text(text)


async def cmd_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = (update.message.text or "").replace("/text", "", 1).strip()
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü—Ä–∏–º–µ—Ä: /text –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–∞")
        return

    try:
        reply = await generate_text(prompt)
        await update.message.reply_text(reply)
    except Exception as e:
        LOG.exception("text error: %r", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def cmd_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = (update.message.text or "").replace("/image", "", 1).strip()
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ü—Ä–∏–º–µ—Ä: /image —Ä—ã–∂–∏–π –∫–æ—Ç –≤ –æ—á–∫–∞—Ö")
        return

    try:
        url = await generate_image(prompt)
        await update.message.reply_photo(photo=url, caption="–ì–æ—Ç–æ–≤–æ!")
    except Exception as e:
        LOG.exception("image error: %r", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


async def cmd_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ë–µ—Ä—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "/video"
    prompt = (update.message.text or "").replace("/video", "", 1).strip()
    if not prompt:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ. –ü—Ä–∏–º–µ—Ä: /video –∫–æ—Ç—ë–Ω–æ–∫ –±–µ–∂–∏—Ç –ø–æ —Ç—Ä–∞–≤–µ")
        return

    # –æ–≥—Ä–∞–Ω–∏—á–∏–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    if len(prompt) > 600:
        prompt = prompt[:600]

    user_id = update.effective_user.id
    started_at = datetime.utcnow()

    # –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç + –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚èπ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel:pending"),
        InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", callback_data="status:pending"),
    ]])
    msg = await update.message.reply_text(progress_text(prompt, started_at), reply_markup=kb)

    async def worker():
        async with USER_LOCKS[user_id]:   # –æ–¥–∏–Ω —Ä–æ–ª–∏–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            async with VIDEO_SEM:         # –≤—Å–µ–≥–æ –Ω–µ –±–æ–ª–µ–µ 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                # 1) –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ Together
                job = await start_video_job(prompt)
                if not job:
                    await msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–∫–ª—é—á/–∫–≤–æ—Ç—ã/–¥–æ—Å—Ç—É–ø).")
                    return

                # –ø–æ–¥–º–µ–Ω–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–µ (–∑–Ω–∞—è job.id)
                kb2 = InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚èπ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel:{job.id}"),
                    InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", callback_data=f"status:{job.id}"),
                ]])
                try:
                    await msg.edit_text(progress_text(prompt, started_at), reply_markup=kb2)
                except Exception:
                    pass

                # 2) –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                backoff = [5, 8, 13, 13, 13]  # —à–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è (—Å–µ–∫)
                i = 0
                # —Ñ–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞
                context.chat_data.setdefault("cancel_flags", {})
                context.chat_data["cancel_flags"][job.id] = False

                while True:
                    # –æ—Ç–º–µ–Ω–∞?
                    if context.chat_data["cancel_flags"].get(job.id):
                        await msg.edit_text("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                        break

                    status, url, info = await check_video_once(job.id)
                    if status == "completed" and url:
                        LOG.info("‚úÖ Video ready: %s", url)
                        # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏—à–ª—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        try:
                            await msg.delete()
                        except Exception:
                            pass
                        try:
                            await update.message.reply_video(video=url, caption="–ì–æ—Ç–æ–≤–æ! üéâ")
                        except Exception:
                            await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ! –°—Å—ã–ª–∫–∞: {url}")
                        break

                    if status in ("failed", "cancelled"):
                        await msg.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ. –î–µ—Ç–∞–ª–∏: {info or '–Ω–µ—Ç'}")
                        break

                    # –æ–±–Ω–æ–≤–∏–º ¬´–æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ ‚Ä¶¬ª
                    try:
                        await msg.edit_text(progress_text(prompt, started_at), reply_markup=kb2)
                    except Exception:
                        pass

                    await asyncio.sleep(backoff[min(i, len(backoff)-1)])
                    i += 1

                context.chat_data["cancel_flags"].pop(job.id, None)

    # –∑–∞–ø—É—Å–∫–∞–µ–º ¬´–≤ —Ñ–æ–Ω–µ¬ª, —á—Ç–æ–±—ã —á–∞—Ç –Ω–µ –∑–∞–≤–∏—Å–∞–ª
    context.application.create_task(worker())


async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        action, job_id = query.data.split(":", 1)
    except Exception:
        return

    if action == "cancel" and job_id != "pending":
        context.chat_data.setdefault("cancel_flags", {})
        context.chat_data["cancel_flags"][job_id] = True
        await query.edit_message_text("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é‚Ä¶")

    elif action == "status" and job_id != "pending":
        status, url, info = await check_video_once(job_id)
        txt = f"–°—Ç–∞—Ç—É—Å: {status}"
        if info:
            txt += f"\n–î–µ—Ç–∞–ª–∏: {info}"
        if status == "completed" and url:
            txt += f"\n–°—Å—ã–ª–∫–∞: {url}"
        await query.edit_message_text(txt)


def main():
    app = build_app()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("text", cmd_text))
    app.add_handler(CommandHandler("image", cmd_image))
    app.add_handler(CommandHandler("video", cmd_video))
    app.add_handler(CallbackQueryHandler(on_callback))

    # –†–µ–∂–∏–º: polling (–ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π)
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()

